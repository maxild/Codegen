@*
    The main point of Razor is compiling the so-called views (aka cshtml files)
    in web frameworks. BUT we use it as a macro language in steroids (metaprogramming,
    codegen) to compile templates into C# source code. Therefore the word HTML should be
    interpreted differently when reading the docs. In our case HTML is C# source code, and
    Razor C# code are imperative code (loops, conditionals) used to write C# code in order
    to fight duplication/repetition and also use data from the Domus database as a code
    generator.

    Code blocks and expressions
    ===========================

    Explicit Razor expressions consist of an @ symbol with balanced parenthesis containing C# code:
        @(DateTime.Now - TimeSpan.FromDays(7))
    Implicit Razor expressions start with @ followed by C# code:
        @DateTime.Now
    Razor code blocks start with @ and are enclosed by {}.
        @{ var message = "string"; }
    Unlike expressions, C# code inside code blocks isn't rendered.
    Code blocks and expressions in a view share the same scope and are defined in order:

    When an @ symbol is followed by a Razor reserved keyword, it transitions
    into Razor-specific markup. Otherwise, it transitions into plain C#.

    Razor (reserved) keywords
      * namespace
      * functions
      * inherits
      * model
      * section
      * helper

    Razor keywords are escaped with @(Razor Keyword) (for example, @(functions)).

      C# Razor (reserved) keywords
          * case
          * do
          * default
          * for
          * foreach
          * if
          * else
          * lock
          * switch
          * try
          * catch
          * finally
          * using
          * while

    C# Razor keywords must be double-escaped with @(@C# Razor Keyword) (for example, @(@case)).
    The first @ escapes the Razor parser. The second @ escapes the C# parser.

    When building a project, the Razor SDK generates an 'obj/<configuration>/<tfm>/Razor' directory
    in the project root. Lets do the same here.

    RazorSource.cshtml, RazorSource.cshtml.cs  -> RazorSource.g.cshtml.cs (generated class)

    We should maybe use pre-compiled templates
*@
@using Codegen.Razor;
@inherits CSharpRazor.TemplateBase<DayOfWeekModel>
@{
    var message = "string";
}
using static System.Console;

@* Razor supports C# and uses the @ symbol to transition from HTML to C#. *@
namespace RazorCodeTemplateSample
{
    public static class MessagePrinter
    {
        /// <summary>
        /// @GetHello("Morten")
        /// </summary>
        public static void Print()
        {
        @* This is a comment in markup *@
        @foreach (var c in message)
        {
            // To render the rest of an entire line as HTML inside a code block, use the @:
            // The code/variable is rendered in HTML with a single @ symbol
            @:WriteLine('@c');
        }
        }
    }

    @foreach (var day in @Model.GivenWeekDays())
    {
    // To define a subsection of a code block that should appear in the output,
    // surround the characters for rendering with the Razor <text> tag
    // Only the content between the <text> tag is rendered.
    // No whitespace before or after the <text> tag appears in the output.
    <text>
    public class @(day + "Content")
    {
        public string Name { get; } = "@day.ToString()";
    }
    </text>

    }
}

@functions {
    public string GetHello(string name)
    {
        return $"Hello {name}";
    }
}

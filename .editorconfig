# Suppress: EC114 EC120
# EditorConfig is awesome: https://EditorConfig.org

# Here are some resources for what's supported for .NET/C#
# https://kent-boogaart.com/blog/editorconfig-reference-for-c-developers
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
#
# Be **careful** editing this because some of the rules don't support adding a severity level
# For instance if you change to `dotnet_sort_system_directives_first = true:warning` (adding `:warning`)
# then the rule will be silently ignored.

#
# Standard code styles (http://editorconfig.org/)
#

# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

#### Core EditorConfig Options ####

# Don't use tabs for indentation.
[*]
indent_style             = space
charset                  = utf-8
trim_trailing_whitespace = true
insert_final_newline     = true
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx}]
indent_size = 4
# UTF-8 + BOM (aka preamble) is really the default encoding for C#-files.
charset     = utf-8-bom

# Razor templates
# TODO: add the correct extension
[*.{razor,cshtml}]
charset = utf-8-bom

# XML project files
[*.{csproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# PowerShell files
[*.{ps1,psm1}]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

# Nix files
[*.nix]
end_of_line = lf
indent_size = 2

# Shell script that is sourced in build.sh
[build.config]
end_of_line = lf

# YAML looks best with 2 spaces
[*.{yml,yaml}]
indent_size = 2

# direnv rc (run command) file
[.envrc]
end_of_line = lf

#### .NET Coding Conventions ####

#
# C#/.NET Code Styles of the following 4 subcategories (each with its own specific syntax -- prefix)
#
#     - Formatting rules (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules)
#         * dotnet_ prefixed rules.
#         * csharp_ prefixed rules.
#     - Language rules (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules)
#         * dotnet_style_ prefixed rules
#         * csharp_style_ prefixed rule
#     - Naming rules (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules)
#     - Unnecessary code rules (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules)
#
#  Options for 'formatting rules' can be specified in an EditorConfig file with the following format:
#        rule_name = value
#  Options for 'language rules' can be specified in an EditorConfig file with the following format:
#        option_name = value:severity
#  NOTE:  Severity specification as part of the above option syntax is only respected inside development IDEs,
#    such as Visual Studio. This setting is not understood by the C# compiler. you should set the severity by using the
#    rule ID-based severity configuration syntax for analyzers. The syntax takes the form
#        dotnet_diagnostic.<rule ID>.severity = <severity>,
#    for example, dotnet_diagnostic.IDE0040.severity = silent.
#    See also https://github.com/dotnet/roslyn/issues/44201
#     Tip: Starting in Visual Studio 2019 version 16.3, you can configure code style rules from the Quick Actions light
#     bulb menu after a style violation occurs. For more information, see Automatically configure code styles in Visual Studio.

#
# Format rules
#

# Sort System.* using directives alphabetically, and place them before other using directives.
dotnet_sort_system_directives_first     = true
# Do not place a blank line between using directive groups.
dotnet_separate_import_directive_groups = false

#
# C# Format rules
#

[*.cs]
# Newline options (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#new-line-options)
csharp_new_line_before_open_brace                                             = all
csharp_new_line_before_else                                                   = true
csharp_new_line_before_catch                                                  = true
csharp_new_line_before_finally                                                = true
csharp_new_line_before_members_in_object_initializers                         = true
csharp_new_line_before_members_in_anonymous_types                             = true
csharp_new_line_between_query_expression_clauses                              = true

# Indentation options (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#indentation-options)
csharp_indent_block_contents                                                  = true
csharp_indent_braces                                                          = false
csharp_indent_case_contents                                                   = true
csharp_indent_case_contents_when_block                                        = true
csharp_indent_switch_labels                                                   = true
csharp_indent_labels                                                          = flush_left

# Spacing options (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#spacing-options)
csharp_space_after_cast                                                       = false
csharp_space_after_colon_in_inheritance_clause                                = true
csharp_space_after_comma                                                      = true
csharp_space_after_dot                                                        = false
csharp_space_after_keywords_in_control_flow_statements                        = true
csharp_space_after_semicolon_in_for_statement                                 = true
csharp_space_around_binary_operators                                          = before_and_after
csharp_space_around_declaration_statements                                    = do_not_ignore
;https://github.com/dotnet/roslyn/blob/6a52142bef1db0a0936c483d13f426acae335555/src/Workspaces/CSharp/Portable/Formatting/CSharpFormattingOptions.cs#L183-L191
;csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause                               = true
csharp_space_before_comma                                                     = false
csharp_space_before_dot                                                       = false
csharp_space_before_open_square_brackets                                      = false
csharp_space_before_semicolon_in_for_statement                                = false
csharp_space_between_empty_square_brackets                                    = false
# Comment out this only for testing support in different IDEs
csharp_space_between_method_call_empty_parameter_list_parentheses             = false
csharp_space_between_method_call_name_and_opening_parenthesis                 = false
csharp_space_between_method_call_parameter_list_parentheses                   = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses      = false
csharp_space_between_method_declaration_name_and_open_parenthesis             = false
csharp_space_between_method_declaration_parameter_list_parentheses            = false
csharp_space_between_parentheses                                              = false
csharp_space_between_square_brackets                                          = false
# Uncomment this only for testing support in different IDEs
# csharp_space_between_method_call_empty_parameter_list_parentheses = true
# csharp_space_between_method_call_name_and_opening_parenthesis = true
# csharp_space_between_method_call_parameter_list_parentheses = true
# csharp_space_between_method_declaration_empty_parameter_list_parentheses = true
# csharp_space_between_method_declaration_name_and_open_parenthesis = true
# csharp_space_between_method_declaration_parameter_list_parentheses = true
# csharp_space_between_parentheses = control_flow_statements, expressions, type_casts
# csharp_space_between_square_brackets = true

# Wrap options (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#wrap-options)
csharp_preserve_single_line_statements                                        = true
csharp_preserve_single_line_blocks                                            = true

# Prefer curly braces even for one line of code (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0011#csharp_prefer_braces)
;csharp_prefer_braces = true:silent
csharp_prefer_braces                                                          = when_multiline : suggestion


# Using directive options (https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#using-directive-options)
csharp_using_directive_placement                                              = outside_namespace : silent

#
# Language rules
#

# Avoid "this." if not necessary
dotnet_style_qualification_for_field                                          = false : silent
dotnet_style_qualification_for_property                                       = false : silent
dotnet_style_qualification_for_method                                         = false : silent
dotnet_style_qualification_for_event                                          = false : silent

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members                    = true : error
dotnet_style_predefined_type_for_member_access                                = true : error

# Suggest more modern language features when available
dotnet_style_object_initializer                                               = true : suggestion
dotnet_style_collection_initializer                                           = true : suggestion
dotnet_style_coalesce_expression                                              = true : suggestion
dotnet_style_null_propagation                                                 = true : suggestion
dotnet_style_explicit_tuple_names                                             = true : suggestion

#
# C# Language rules
#

# Prefer "var" everywhere
csharp_style_var_for_built_in_types                                           = true : suggestion
csharp_style_var_when_type_is_apparent                                        = true : suggestion
csharp_style_var_elsewhere                                                    = true : suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods                                        = false : none
csharp_style_expression_bodied_constructors                                   = false : none
csharp_style_expression_bodied_operators                                      = false : none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties                                     = true : none
csharp_style_expression_bodied_indexers                                       = true : none
csharp_style_expression_bodied_accessors                                      = true : none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check                         = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check                         = true : suggestion
csharp_style_inlined_variable_declaration                                     = true : suggestion
csharp_style_throw_expression                                                 = true : suggestion
csharp_style_conditional_delegate_call                                        = true : suggestion


#
# Naming rules
#

# Constants are cased like THIS_IS_A_CONSTANT

# the middle part 'constants_must_be_upper_cased' can be named anything (your choice)
dotnet_naming_rule.constants_must_be_upper_cased.severity                     = error
dotnet_naming_rule.constants_must_be_upper_cased.symbols                      = constant_symbols
dotnet_naming_rule.constants_must_be_upper_cased.style                        = all_upper_style

# the middle part 'constant_symbols' can be named anything (your choice)
# TODO: Do we need to differentiate public/private const values?
dotnet_naming_symbols.constant_symbols.applicable_kinds                       = *
dotnet_naming_symbols.constant_symbols.required_modifiers                     = const

# the middle part 'all_upper_style' can be named anything (your choice)
dotnet_naming_style.all_upper_style.capitalization                            = all_upper

##############################

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity   = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols    = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style      = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds              = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities    = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers            = static

dotnet_naming_style.non_private_static_field_style.capitalization             = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols  = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style    = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds            = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities  = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers          = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization           = pascal_case

# Constants are PascalCase
;dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
;dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
;dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

;dotnet_naming_symbols.constants.applicable_kinds = field, local
;dotnet_naming_symbols.constants.required_modifiers = const

;dotnet_naming_style.constant_style.capitalization = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity                = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols                 = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style                   = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds                          = field
dotnet_naming_symbols.static_fields.required_modifiers                        = static

dotnet_naming_style.static_field_style.capitalization                         = camel_case
dotnet_naming_style.static_field_style.required_prefix                        = s_

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity              = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols               = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style                 = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds                        = field

dotnet_naming_style.instance_field_style.capitalization                       = camel_case
dotnet_naming_style.instance_field_style.required_prefix                      = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity                       = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols                        = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style                          = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds                  = parameter, local

dotnet_naming_style.camel_case_style.capitalization                           = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity             = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols              = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style                = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds                        = local_function

dotnet_naming_style.local_function_style.capitalization                       = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity                     = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols                      = all_members
dotnet_naming_rule.members_should_be_pascal_case.style                        = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds                            = *

dotnet_naming_style.pascal_case_style.capitalization                          = pascal_case


#### Diagnostic severity configuration ####

# IMPORTANT: The following IDEXXXX are never enforced on commandline builds
# (https://github.com/dotnet/roslyn/blob/9f87b444da9c48a4d492b19f8337339056bf2b95/src/Analyzers/Core/Analyzers/EnforceOnBuildValues.cs#L95)
# (https://github.com/dotnet/roslyn/blob/master/src/Analyzers/Core/Analyzers/EnforceOnBuildValues.cs#L92-L100)
#   IDE0001: SimplifyNames
#   IDE0002: SimplifyMemberAccess
#   IDE0003: RemoveQualification
#   IDE0009: AddQualification
#   IDE0049: PreferBuiltInOrFrameworkType
#   IDE0035: RemoveUnreachableCode
#   IDE0079: RemoveUnnecessarySuppression

#
# Severity configuration (See https://github.com/dotnet/roslyn/issues/44201)
# (Visual Studio 2019 version 16.3 and later)
# https://docs.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers?view=vs-2019#set-rule-severity-in-an-editorconfig-file
#

# We have 2 options
# 1. In an .editorconfig file, configure each "IDE" code style rule that you
#    wish to run on build as a warning or an error.
# 2. Otherwise configure the entire "Style" category to be a warning or error, by default,
#    and then selectively turn off rules that you don't want to run on build.
# TODO: We try out option 2 here, but we need to silent

# Default severity for analyzer diagnostics with category 'Style' (escalated to build warnings)
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview#enable-on-build
dotnet_analyzer_diagnostic.category-Style.severity                            = warning

# IDE0040: Accessibility modifiers required (disabled on build)
dotnet_diagnostic.IDE0040.severity                                            = silent

# IDE0079: Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity                                            = silent

# IDE0007: Use 'var' instead of explicit type
dotnet_diagnostic.IDE0007.severity                                            = suggestion
# IDE0008: Use explicit type instead of 'var'
;dotnet_diagnostic.IDE0008.severity = suggestion

# IDE0058: Remove unnecessary expression value (TODO: forcing discards makes side-effects more explicit)
dotnet_diagnostic.IDE0058.severity                                            = suggestion

# All formatting options have rule ID IDE0055 and title Fix formatting.
# IDE0055: Fix formatting
;dotnet_diagnostic.IDE0055.severity = warning

# error RS2008: Enable analyzer release tracking for the analyzer project containing rule '{0}'
;dotnet_diagnostic.RS2008.severity = none

# IDE0073: File header
;dotnet_diagnostic.IDE0073.severity = warning

# IDE0035: Remove unreachable code
;dotnet_diagnostic.IDE0035.severity = warning

# IDE0036: Order modifiers
;dotnet_diagnostic.IDE0036.severity = warning

# IDE0043: Format string contains invalid placeholder
;dotnet_diagnostic.IDE0043.severity = warning

# IDE0044: Make field readonly
;dotnet_diagnostic.IDE0044.severity = warning

# IDE0049: Name can be simplified (Use language keywords instead of framework type names for type references)
dotnet_diagnostic.IDE0049.severity                                            = error

# RS0016: Only enable if API files are present
;dotnet_public_api_analyzer.require_api_files = true

#
# TODO: Misc to be validated
#

#
dotnet_diagnostic.AD0001.severity                                             = none

# warning RS0005: Do not use generic CodeAction.Create to create CodeAction
;dotnet_diagnostic.RS0005.severity = none


# NOTE: We need the below severity entry for Add Braces due to https://github.com/dotnet/roslyn/issues/44201
;dotnet_diagnostic.IDE0011.severity = warning

# IDE0040: Add accessibility modifiers
;dotnet_diagnostic.IDE0040.severity = warning



# CONSIDER: Are IDE0051 and IDE0052 too noisy to be warnings for IDE editing scenarios? Should they be made build-only warnings?
# IDE0051: Remove unused private member
;dotnet_diagnostic.IDE0051.severity = warning

# IDE0052: Remove unread private member
;dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
;dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
;dotnet_diagnostic.IDE0060.severity = warning

# CA1822: Make member static
;dotnet_diagnostic.CA1822.severity = warning

# Prefer "var" everywhere
;dotnet_diagnostic.IDE0007.severity = warning
;csharp_style_var_for_built_in_types = true:warning
;csharp_style_var_when_type_is_apparent = true:warning
;csharp_style_var_elsewhere = true:warning

# CA1822: Make member static
# Not enforced as a build 'warning' for 'VisualStudio' layer due to large number of false positives from https://github.com/dotnet/roslyn-analyzers/issues/3857 and https://github.com/dotnet/roslyn-analyzers/issues/3858
# Additionally, there is a risk of accidentally breaking an internal API that partners rely on though IVT.
;dotnet_diagnostic.CA1822.severity = suggestion

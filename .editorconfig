; EditorConfig to support per-solution formatting.
; Use the EditorConfig VS add-in to make this work.
; http://editorconfig.org/
;
; Here are some resources for what's supported for .NET/C#
; https://kent-boogaart.com/blog/editorconfig-reference-for-c-developers
; https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
;
; Be **careful** editing this because some of the rules don't support adding a severity level
; For instance if you change to `dotnet_sort_system_directives_first = true:warning` (adding `:warning`)
; then the rule will be silently ignored.

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
charset = utf-8
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx}]
indent_size = 4
insert_final_newline = true
# visual studio seems to have issues with utf-8
charset = utf-8-bom

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# XML files
[*.xml]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

[*.nix]
end_of_line = lf
indent_size = 2

[build.config]
end_of_line = lf

# YAML looks best with 2 spaces
[*.{yml,yaml}]
indent_size = 2

[{.envrc}]
end_of_line = lf
